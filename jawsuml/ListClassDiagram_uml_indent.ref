parsetree = \
(   'diagram:',
    (   'classDiagram:',
        'ListClassDiagram',
        '{',
        (   '@',
            ' This is a class diagram of interface java.util.List and\n    related interfaces and classes from package java.util\n    for CSC520 Advanced Object Oriented Programming, Spring 2016,\n    D. Parson.\n    ',
            '@'),
        (   'class-sequence:',
            (   'package:',
                'java.util',
                '{',
                (   'package-contents:',
                    (   'interface:',
                        'interface',
                        'Iterable<T>',
                        '{',
                        (   'class-contents:',
                            (   'method:',
                                '+',
                                'iterator',
                                '(',
                                ')',
                                ('type:', 'Iterator<T>'),
                                ';')),
                        '}',
                        (   'association-list:',
                            ('uses:', 'Iterator<E>'),
                            ';')),
                    (   'interface:',
                        'interface',
                        'Iterator<E>',
                        '{',
                        (   'class-contents:',
                            (   'method:',
                                '+',
                                'hasNext',
                                '(',
                                ')',
                                ('type:', 'boolean'),
                                ';'),
                            (   'method:',
                                '+',
                                'next',
                                '(',
                                ')',
                                ('type:', 'E'),
                                ';'),
                            (   'method:',
                                '+',
                                'remove',
                                '(',
                                ')',
                                ('type:', 'void'),
                                ';')),
                        '}'),
                    (   'interface:',
                        'interface',
                        'Collection<E>',
                        ('extends', 'Iterable<T>'),
                        '{',
                        (   'class-contents:',
                            (   'method:',
                                '+',
                                'add',
                                '(',
                                ('param-list:', ('e', ('type:', 'E'))),
                                ')',
                                ('type:', 'boolean'),
                                ';'),
                            (   'method:',
                                '+',
                                'contains',
                                '(',
                                (   'param-list:',
                                    ('o', ('type:', 'Object'))),
                                ')',
                                ('type:', 'boolean'),
                                ';'),
                            (   'method:',
                                '+',
                                'remove',
                                '(',
                                (   'param-list:',
                                    ('o', ('type:', 'Object'))),
                                ')',
                                ('type:', 'boolean'),
                                ';'),
                            (   'method:',
                                '+',
                                'size',
                                '(',
                                ')',
                                ('type:', 'int'),
                                ';')),
                        '}',
                        (   '@',
                            " Interface Inheritance always places an interface at the\n        // destination of the triangular inheritance arrow. An Interface\n        is a specification. In this text notation an interface extends\n        another interface, but a class implements an interface.\n        The 'extends' and 'implements' keywords are from Java.\n        If the thing being extended by another interface or\n        implemented by a class is an interface, you have\n        Interface Inheritance.\n        ",
                            '@')),
                    (   'interface:',
                        'interface',
                        'List<E>',
                        ('extends', 'Collection<E>'),
                        '{',
                        (   'class-contents:',
                            (   'method:',
                                '+',
                                'add',
                                '(',
                                ('param-list:', ('e', ('type:', 'E'))),
                                ')',
                                ('type:', 'boolean'),
                                ';'),
                            (   'method:',
                                '+',
                                'contains',
                                '(',
                                (   'param-list:',
                                    ('o', ('type:', 'Object'))),
                                ')',
                                ('type:', 'boolean'),
                                ';'),
                            (   'method:',
                                '+',
                                'get',
                                '(',
                                (   'param-list:',
                                    ('index', ('type:', 'int'))),
                                ')',
                                ('type:', 'E'),
                                ';'),
                            (   'method:',
                                '+',
                                'remove',
                                '(',
                                (   'param-list:',
                                    ('index', ('type:', 'int'))),
                                ')',
                                ('type:', 'E'),
                                ';'),
                            (   'method:',
                                '+',
                                'remove',
                                '(',
                                (   'param-list:',
                                    ('o', ('type:', 'Object'))),
                                ')',
                                ('type:', 'boolean'),
                                ';'),
                            (   'method:',
                                '+',
                                'size',
                                '(',
                                ')',
                                ('type:', 'int'),
                                ';')),
                        '}'),
                    (   'class:',
                        ('abstract',),
                        'class',
                        'AbstractCollection<E>',
                        ('implements', 'Collection<E>'),
                        '{',
                        '}'),
                    (   'class:',
                        ('abstract',),
                        'class',
                        'AbstractList<E>',
                        (   'implements',
                            'List<E>',
                            'extends',
                            'AbstractCollection<E>'),
                        '{',
                        '}',
                        (   '@',
                            ' Implementation Inheritance always places a class at the\n        destination of the triangular inheritance arrow. An class\n        is an implementation of data fields and methods. In this\n        text notation we borrow from java and say that one class\n        extends another.\n        ',
                            '@')),
                    (   'class:',
                        ('abstract',),
                        'class',
                        'AbstractSequentialList<E>',
                        ('extends', 'AbstractList<E>'),
                        '{',
                        '}'),
                    (   'class:',
                        'class',
                        'LinkedList<E>',
                        ('extends', 'AbstractSequentialList<E>'),
                        '{',
                        '}'),
                    (   'class:',
                        'class',
                        'ArrayList<E>',
                        ('extends', 'AbstractList<E>'),
                        '{',
                        '}'),
                    (   'class:',
                        'class',
                        'ClientCodeClass',
                        '{',
                        '}',
                        (   'association-list:',
                            ('uses:', 'Iterator<E>'),
                            ('uses:', 'List<E>'),
                            ';'),
                        (   '@',
                            " Polymorphism means that a data field or method parameter or\n        local variable can take many forms. If ClientCodeClass uses\n        a field of type List<E>, for example, the actual object may be\n        a LinkedList<E>, ArrayList<E>, or some other subclass of List<E>.\n        'uses' points to the class or interface on its right.\n        'usedby' points to the class or interface on its left.\n        'useboth' points both directions. There is an arrow in each direction.\n        'assoc' has no arrows. It is an undirected association line in a diagram.\n        ",
                            '@'))),
                '}')),
        '}'))
