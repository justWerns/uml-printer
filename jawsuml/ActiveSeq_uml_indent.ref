parsetree = \
(   'diagram:',
    (   'sequenceDiagram:',
        'ActiveSeq',
        '{',
        (   '@',
            '\n    // aProducer and aConsumer are active objects, meaning that each runs\n    // its own thread. aConsumer can call a method within aRepository\n    // while aProducer is still running in a method within aRepository.\n    // Therefore, we cannot use nesting in a dynamic function call textual\n    // representation to model sequence diagrams; the aProducer and aConsumer\n    // calls do not nest. {{}} denotes an active object.\n    ',
            '@'),
        (   'sequence-list:',
            (   'object:',
                'active',
                'object',
                'aProducer',
                ('type:', 'Producer'),
                '{',
                '}'),
            (   'object:',
                'object',
                'aRepository',
                ('type:', 'Repository'),
                '{',
                '}'),
            (   'object:',
                'active',
                'object',
                'aConsumer',
                ('type:', 'Consumer'),
                '{',
                '}'),
            (   'call:',
                'aProducer',
                'calls',
                'aRepository.produce',
                '(',
                ('param-list:', ('product',)),
                ')',
                ';'),
            (   'call:',
                'aConsumer',
                'calls',
                'aRepository.consume',
                '(',
                ')',
                ';',
                (   '@',
                    ' Two concurrent calls are both running within aRepository. ',
                    '@')),
            (   'return:',
                'aRepository.consume()',
                'returns',
                'product',
                'to',
                'aConsumer',
                ';'),
            (   'return:',
                'aRepository.produce()',
                'returns',
                'to',
                'aProducer',
                ';',
                (   '@',
                    ' This last return of type void simply returns control. ',
                    '@'))),
        '}'))
