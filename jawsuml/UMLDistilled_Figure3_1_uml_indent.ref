parsetree = \
(   'diagram:',
    (   'classDiagram:',
        'Figure3.1',
        '{',
        (   '@',
            "\n    // This is Figure 3.1 from UML Distilled,\n    // labeled 'A simple class diagram' in the book.\n    // It adds several constructs beyond our first example\n    // of java.util.List<E>. Comments about those appear\n    // immediately after their first use below.\n    ",
            '@'),
        (   'class-sequence:',
            (   'class:',
                'class',
                'Customer',
                '{',
                (   'class-contents:',
                    (   'attribute:',
                        'name',
                        '[1]',
                        ';',
                        (   '@',
                            "\n        // 'name' above is an attribute, which is UML's term\n        // for a data field within a class. The '[1]' is\n        // optional. It is the attribute's multiplicity, which\n        // means the number of those fields that must appear.\n        // When the multiplicity is missing, we can assume one attribute.\n        // The textbook shows the full syntax of an attribute as follows:\n        // visibility name : type multiplicity = default\n        // The next comment line gives an example:\n        // - name : String = 'Untitled' ;\n        // Every part of the attribute declaration except its name\n        // is optional. The visibility is '+' for public,\n        // '-' for private, '#' for protected, and '~' for package.\n        // '~' means accessible anywhere in the package; Java uses\n        // this when you do not specify visibility. It is like a\n        // friend class or function in C++. When visibility is missing,\n        // it could be any of the above. The author often leaves it off.\n        ",
                            '@')),
                    (   'attribute:',
                        'address',
                        '[0..1]',
                        ';',
                        (   '@',
                            " // Multiplicity '[0..1]' means 0 or 1 address attribute. ",
                            '@')),
                    (   'method:',
                        'getCreditRange',
                        '(',
                        ')',
                        ('type:', 'String'),
                        ';',
                        (   '@',
                            "\n        // 'getCreditRange' is a method (member function) that\n        // returns a String. The parentheses denote it as a method.\n        ",
                            '@'))),
                '}'),
            ('class:', 'class', 'Employee', '{', '}'),
            (   'class:',
                'class',
                'CorporateCustomer',
                ('extends', 'Customer'),
                '{',
                (   '@',
                    "\n        // We are using 'extends' to show inheritance from a\n        // class to a class, or from an interface to an interface,\n        // just like in Java. This is an arrowed line with a triangular\n        // arrow head to the base class or interface in UML diagrams.\n        // We use 'implements' from a class to interface, as in Java.\n        // When the arrow points to an interface, that is always\n        // 'interface inheritance'. When it points to a class,\n        // it is 'implementation inheritance.' UML calls these arrows\n        // 'generalization'. The base class or interface is more\n        // general, and the derived class or interface is a \n        // specialization of the base class or interface.\n        ",
                    '@'),
                (   'class-contents:',
                    ('attribute:', 'contactName', ';'),
                    ('attribute:', 'creditRating', ';'),
                    ('attribute:', 'creditLimit', ';'),
                    (   'method:',
                        'billForMonth',
                        '(',
                        ('param-list:', ('Integer',)),
                        ')',
                        ';'),
                    ('method:', 'remind', '(', ')', ';')),
                '}',
                (   'association-list:',
                    ('uses:', '[*]', '[0..1]', '"salesrep"', 'Employee'),
                    ';'),
                (   '@',
                    "\n    // Compare that last line to the 'association' line in your\n    // Figure 3.1 textbook graph. The multiplicity [*] is on the\n    // CorporateCustomer, and the multiplicity [0..1] is on Employee.\n    // [*] means 0 or more. The 'salesrep' is an optional string\n    // tagged to the line that shows the role that an Employee\n    // plays in the association. Please read the 'Associations'\n    // part of Chapter 3. Two salient quotes from it are here:\n    // 'The name of the property goes at the target end of the\n    // association, together with its multiplicity.' and\n    // 'Associations can show multiplicities at both ends of the lines.'\n    ",
                    '@')),
            (   'class:',
                'class',
                'PersonalCustomer',
                ('extends', 'Customer'),
                '{',
                (   'class-contents:',
                    ('attribute:', 'creditCardNumber', ';')),
                '}'),
            ('class:', 'class', 'Product', '{', '}'),
            (   'class:',
                'class',
                'OrderLine',
                '{',
                (   'class-contents:',
                    ('attribute:', 'quantity', ('type:', 'Integer'), ';'),
                    ('attribute:', 'price', ('type:', 'Money'), ';')),
                '}',
                (   'association-list:',
                    ('uses:', '[*]', '[1]', 'Product'),
                    ';')),
            (   'class:',
                'class',
                'Order',
                '{',
                (   'class-contents:',
                    (   'attribute:',
                        'dateReceived',
                        ('type:', 'Date'),
                        '[0..1]',
                        ';'),
                    (   'attribute:',
                        'isPrepaid',
                        ('type:', 'Boolean'),
                        '[1]',
                        ';'),
                    (   'attribute:',
                        'number',
                        ('type:', 'String'),
                        '[1]',
                        ';'),
                    ('attribute:', 'price', ('type:', 'Money'), ';'),
                    ('method:', 'dispatch', '(', ')', ';'),
                    ('method:', 'close', '(', ')', ';')),
                '}',
                (   'association-list:',
                    ('uses:', '[*]', '[1]', 'Customer'),
                    ('uses:', '[1]', '[*]', '"lineItems"', 'OrderLine'),
                    ';'),
                (   '@',
                    "\n    // There are two associations coming out of Order.\n    // The first goes from 0 or more Order objects to 1 Customer object.\n    // The second goes from 1 Order object to 0 or more OrderLine objects\n    // with a role of 'lineItems'. There can be many associations coming\n    // out of a given class. Our notation uses commas to separate\n    // them and a semicolon to terminate them.\n    ",
                    '@'))),
        '}'))
