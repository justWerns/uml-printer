parsetree = \
(   'diagram:',
    (   'sequenceDiagram:',
        'Figure4.2',
        '{',
        (   '@',
            '\n    // Textbook says: A sequence diagram for distributed control.\n    // A sequence diagram shows high-level method calls between major\n    // objects in a system. I would not consider a String object to be a\n    // major object. Major objects are objects of important application\n    // domain classes. We usually model important exchanges of data\n    // or control via sequence diagrams. I often use them to model\n    // method calls made over a communications network such as TCP/IP.\n    ',
            '@'),
        (   'sequence-list:',
            (   'object:',
                'object',
                'anOrder',
                ('type:', 'Order'),
                '{',
                '}',
                (   '@',
                    '\n    // Our notation uses the keyword "object" to declare an example\n    // object of some class like this:\n    // object EXAMPLE_OBJECT_NAME : CLASSNAME {}\n    // The CLASSNAME is usually a class appearing in a class diagram,\n    // but the EXAMPLE_OBJECT_NAME is just a representative object of\n    // that class. There could be many objects of CLASSNAME in a\n    // sequence diagram or in an object diagram, which we will get to\n    // in Chapter 6. The {} just signifies that an object appears as a box\n    // in a UML visual diagram.\n    ',
                    '@')),
            (   'object:',
                'object',
                'anOrderLine',
                ('type:', 'OrderLine'),
                '{',
                '}'),
            (   'object:',
                'object',
                'aProduct',
                ('type:', 'Product'),
                '{',
                '}'),
            (   'object:',
                'object',
                'aCustomer',
                ('type:', 'Customer'),
                '{',
                '}'),
            (   'call:',
                '?',
                'calls',
                'anOrder.calculatePrice',
                '(',
                ')',
                ';',
                (   '@',
                    '\n    // The above line shows a method call coming into this diagram from\n    // outside the objects being modeled. An external object is calling\n    // method calculatePrice on object anOrder. Most method calls are between\n    // objects declared above, but a call from an external object can\n    // come in as denoted above. The above call is\n    // an initial call in a dynamic call graph being modeled. There could\n    // be many different dynamic call graphs, i.e., sequences of calls,\n    // for a given set of objects. Sequence diagrams usually show\n    // representative example sequences of calls.\n    ',
                    '@')),
            (   'call:',
                'anOrder.calculatePrice()',
                'calls',
                'anOrderLine.calculatePrice',
                '(',
                ')',
                ';'),
            (   'call:',
                'anOrderLine.calculatePrice()',
                'calls',
                'aProduct.getPrice',
                '(',
                ('param-list:', ('quantity', ('type:', 'number'))),
                ')',
                ';'),
            (   'call:',
                'anOrderLine.calculatePrice()',
                'calls',
                'aCustomer.getDiscountedValue',
                '(',
                ('param-list:', ('anOrder',)),
                ')',
                ';'),
            (   'call:',
                'aCustomer.getDiscountedValue()',
                'calls',
                'anOrder.getBaseValue',
                '(',
                ')',
                ';'),
            (   'send:',
                'aCustomer.getDiscountedValue()',
                'sends',
                'discountedValue',
                'to',
                'anOrder.calculatePrice()',
                ';',
                (   '@',
                    '\n    // The textbook labels this as a delayed (asynchronous) result returned\n    // across a network, triggered by the original call to\n    // aCustomer.getDiscountedValue().\n    ',
                    '@'))),
        '}'))
